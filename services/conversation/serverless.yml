service: conversation-service

frameworkVersion: "4"

plugins: ${file(../../sls_common/plugins.yml):plugins}

provider: ${file(../../sls_common/provider.yml):provider}

functions:
  getConversations:
    handler: handler.getConversations
    timeout: 30
    events:
      - httpApi:
          path: /conversations/{userId}
          method: get

  startConversationWithPhotographer:
    handler: handler.startConversationWithPhotographer
    timeout: 30
    events:
      - httpApi:
          path: /conversations/{userId}/start/{photographerId}
          method: post

  getConversationWithMessages:
    handler: handler.getConversationWithMessages
    timeout: 30
    events:
      - httpApi:
          path: /conversation/{conversationId}
          method: get

resources:
  Resources:
    #**************************************************************
    #                      S3 Buckets
    #**************************************************************
    ConversationMediaBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:provider.stage}-conversation-media
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerEnforced
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - HEAD
                - PUT
                - POST
              AllowedOrigins:
                - "*"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          IgnorePublicAcls: false
          BlockPublicPolicy: false
          RestrictPublicBuckets: false

    ConversationMediaBucketOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Description: "Restrict access to the media bucket"
          Name: "${self:provider.stage}-ConversationMediaBucketOriginAccessControl"
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4

    ConversationMediaBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ConversationMediaBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "${self:provider.stage}-ConversationMediaBucketPolicy"
              Effect: "Allow"
              Principal: "*"
              Action: "s3:GetObject"
              Resource: !Sub "arn:aws:s3:::${ConversationMediaBucket}/*"

    #**************************************************************
    #                      DynamoDB Tables
    #**************************************************************
    ConversationTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.stage}-Conversations
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: photographerId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL # Project all attributes
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: PhotographerIndex
            KeySchema:
              - AttributeName: photographerId
                KeyType: HASH
            Projection:
              ProjectionType: ALL # Project all attributes
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    
    MessagesTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.stage}-Messages
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: conversationId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: conversationId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: ConversationIndex
            KeySchema:
              - AttributeName: conversationId
                KeyType: HASH
            Projection:
              ProjectionType: ALL # Project all attributes
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1


custom:
  stage: "${opt:stage, self:provider.stage}"
  projectName: ${self:provider.stage}-surfvault-api

