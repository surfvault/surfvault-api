service: user-service

frameworkVersion: "4"

plugins: ${file(../../sls_common/plugins.yml):plugins}

provider: ${file(../../sls_common/provider.yml):provider}

constructs:
  updateS3PhotographerHandle:
    type: queue
    worker:
      handler: handler.updateS3PhotographerHandle
  
  updateS3PhotographerAccess:
    type: queue
    worker:
      handler: handler.updateS3PhotographerAccess

functions:
  getSelf:
    handler: handler.getSelf
    timeout: 30
    events:
      - httpApi:
          path: /user/{id}/self
          method: get
  
  getPhotographer:
    handler: handler.getPhotographer
    timeout: 30
    events:
      - httpApi:
          path: /user/{handle}
          method: get

  updateUserHandle:
    handler: handler.updateUserHandle
    timeout: 30
    events:
      - httpApi:
          path: /user/{id}/handle
          method: patch
  
  updateUserFavorites:
    handler: handler.updateUserFavorites
    timeout: 30
    events:
      - httpApi:
          path: /user/{id}/favorites
          method: patch
  
  updateUserMetaData:
    handler: handler.updateUserMetaData
    timeout: 30
    events:
      - httpApi:
          path: /user/{id}/meta
          method: patch
  
  followPhotographer:
    handler: handler.followPhotographer
    timeout: 30
    events:
      - httpApi:
          path: /user/{id}/follow
          method: patch

custom:
  stage: "${opt:stage, self:provider.stage}"
  projectName: ${self:provider.stage}-surfvault-api

resources:
  Resources:
    #**************************************************************
    #                      SQS Queues
    #**************************************************************
    UpdateS3PhotographerHandleQueueDeadLetterQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.stage}-UpdateS3PhotographerHandleQueueDeadLetterQueue"
        MessageRetentionPeriod: 1209600
        DelaySeconds: 10

    UpdateS3PhotographerHandleQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.stage}-UpdateS3PhotographerHandleQueue"
        VisibilityTimeout: 60
        MessageRetentionPeriod: 1209600
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - UpdateS3PhotographerHandleQueueDeadLetterQueue
              - Arn
          maxReceiveCount: 3
    
    UpdateS3PhotographerAccessQueueDeadLetterQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.stage}-UpdateS3PhotographerAccessQueueDeadLetterQueue"
        MessageRetentionPeriod: 1209600
        DelaySeconds: 10

    UpdateS3PhotographerAccessQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.stage}-UpdateS3PhotographerAccessQueue"
        VisibilityTimeout: 60
        MessageRetentionPeriod: 1209600
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - UpdateS3PhotographerAccessQueueDeadLetterQueue
              - Arn
          maxReceiveCount: 3

    #**************************************************************
    #                      S3 Buckets
    #**************************************************************
    ProfileBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:provider.stage}-surf-profile
        OwnershipControls:
          Rules:
            - ObjectOwnership: BucketOwnerEnforced
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - HEAD
                - PUT
                - POST
              AllowedOrigins:
                - "*"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          IgnorePublicAcls: false
          BlockPublicPolicy: false
          RestrictPublicBuckets: false

    ProfileBucketOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Description: "Restrict access to the media bucket"
          Name: "${self:provider.stage}-ProfileBucketOriginAccessControl"
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4

    ProfileBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ProfileBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "${self:provider.stage}-ProfileBucketPolicy"
              Effect: "Allow"
              Principal: "*"
              Action: "s3:GetObject"
              Resource: !Sub "arn:aws:s3:::${ProfileBucket}/*"

